syntax = "proto3";

package Protocol;
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
option csharp_namespace = "Google.Protobuf.Protocol";


/* -----------<Packet Format>------------
 * S_L2G_ ...	 => Login To Game Server
 * S_G2L_ ...	 => Game To Login Server
 * S_Common_ ... => Server Common
 * S_ ...		 => Server To Client
 */

 /*------------<Packet Name Constraints>---------
		if Sender/Receiver is Server-Client Relation, skip _L2G / _G2L/ _Common. 
		Sender(_S2S)_Verb_Target(_Verb)
		ex) S_L2G_Transfer_Player_To
		if target's name contains two nouns, seperate it with _(Underscore).
		Infinitive should be right after Target. ex) Player_To
 */

enum PacketID{
	//option allow_alias = true;	//Other Enums can get same numerics
	//-------------------<Login/Register>----------------
	C_DEBUG							= 0;
	S_ERROR_PACKET					= 1;
	C_ACCESS						= 2;
	S_RESPONSE_ACCESS				= 3;
	C_REGISTER						= 4;
	S_RESPONSE_REGISTER				= 5;
	C_DISCONNECT					= 6;

	//-----------------------<Spawn>-----------------------
	C_REQUEST_GAME_SESSION			;
	S_G2L_STANDBY_GAME				;
	S_L2G_INITIALIZE_GAME			;
	S_G2L_RESPONSE_INITIALIZE_GAME	;
	C_EXTRACT_TO					= 7;
	S_COMMON_TRANSFER_PLAYER		;
	S_SPAWN							= 8;

	//-------------------<Login Server Only>---------------
	C_REQUEST_ONLINE				= 9;
	S_RESPONSE_REQUEST_ONLINE		= 10;

	//-------------------<Game Server Only>---------------
	S_LOAD_PLAYERS					= 11;
	S_LOAD_ITEMS					= 12;
	S_LOAD_FIELDS					= 13;
	S_BROADCAST_PLAYER_LEAVE		= 14;
	C_MOVE							= 15;
	S_BROADCAST_PLAYER_MOVE			= 16;
	C_LOOK_ROTATION					= 17;
	S_BROADCAST_PLAYER_ROTATION		= 18;
	C_JUMP							= 19;
	S_BROADCAST_PLAYER_JUMP			= 20;
	C_SYNC_TRANSFORM				= 21;
	S_SYNC_PLAYER_TRANSFORM			= 22;

	//--------------------<Server To Server>----------------

}

//----------------------------------------<Client Packet>---------------------------------------
message C_Debug{
	string message = 1;
}

message C_Access{
	string id = 1;
	string pw = 2;
}

message C_Register{
	string id = 1;
	string pw = 2;
}

message C_Disconnect{ 
}

message C_Extract_To{
	pAreaType prevArea = 1;
	pAreaType destArea = 2;
	int32 roomCode = 3;
}

message C_Request_Online{

}

message C_Move{
	pVector3	  dir	 = 1;
	pPlayerStance stance = 2;
}

message C_Jump{
}

message C_Sync_Transform{
	pVector3 position = 1;
}

message C_Look_Rotation{
	pQuaternion rotation = 1;
}
//----------------------------------------<Login Server Packet>---------------------------------------

message S_Error_Packet{
	NetworkError errorCode = 1;
}

message S_Response_Access{
	NetworkError	errorCode	= 1;
	int32			authCode	= 2;
}

message S_Response_Register{
	bool errorCode = 1;
}

message S_G2L_Standby_Game{
	pEndPoint endPoint = 1;
}

message S_L2G_Initialize_Game{
	pAreaType areaType = 1;
}

message S_G2L_Response_Initialize_Game{
	bool success = 1;
}

message S_Common_Transfer_Player{

}

message S_Spawn{
	int32		authCode = 1;
	pAreaType	prevArea = 2;
	pAreaType	destArea = 3;
}

message S_Interpol_Player{
	int32		authCode	= 1;
	pVector3	position	= 2;
	pQuaternion	rotation	= 3;
}

message S_Load_Players{
	repeated pObjectData objectList = 1;
}

message S_Load_Items{
}

message S_Load_Fields{
}

message S_Broadcast_Player_Leave{
	int32 authCode = 1;
}

message S_Response_Request_Online{
	repeated pOnlineUser onlineUsers = 1;
}

message S_Broadcast_Player_Move{
	int32		  authCode = 1;
	pPlayerStance stance   = 2;
	pVector3	  dir	   = 3;
}

message S_Broadcast_Player_Jump{
	int32 authCode = 1;
}

message S_Sync_Player_Transform{
	repeated pObjectData playerTransforms = 1;
}

message S_Broadcast_Player_Rotation{
	int32 authCode = 1;
	pQuaternion rotation = 2;
}

//----------------------------------------<Game Server Packet>---------------------------------------

//---------------------------------------<Packet Data Model>------------------------------------

message pObjectData{
	int32 authCode = 1;
	pVector3 position = 2;
	pQuaternion rotation = 3;
}

message pItem{
	int32 itemCode = 1;
	int32 itemCount = 2;
}

message pVector3{
	float x = 1;
	float y = 2;
	float z = 3;
}

message pQuaternion{
	float x = 1;
	float y = 2;
	float z = 3;
	float w = 4;
}

message pAuthResult{
	NetworkError errorCode = 1;
	int32 authCode = 2;
}

message pOnlineUser{
	string name = 1;
	int32 authCode = 2;
	pAreaType whereAt = 3;
	bool canAccess = 4;
}

message pEndPoint{
	int64 ipAddress = 1;
	int32 port		= 2;
}

enum pAreaType{
	GAMESTART		= 0;
	HIDEOUT			= 1;
	FIELDMAP		= 2;
	CITYHALL		= 3;		//시청
	RESIDENTIAL		= 4;		//주거지구
	INDUSTRIAL		= 5;		//공업지구
	COMMERCE		= 6;		//상업지구
}

enum pPlayerStance{	
	NOSTANCE	= 0;
	IDLE		= 1;
	CROUCH		= 2;
	WALK		= 3;
	RUN			= 4;
}

enum pObjectType{
	PLAYER = 0;
	MYPLAYER = 1;
	PROJECTILE = 2;
	DROP = 3;
	FIELDOBJECT = 4;
}

enum NetworkError{
	SUCCESS				= 0;
	NOACCOUNT			= 1;
	OVERLAP				= 2;
	INVALID_PASSWORD	= 3;
	INVALID_ROOM		= 4;
	INVALID_ACCESS		= 5;
}

